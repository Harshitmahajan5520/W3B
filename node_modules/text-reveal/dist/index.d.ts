/// <reference types="react" />
import * as react_jsx_runtime from 'react/jsx-runtime';

interface TextRevealProps {
    /**
    * Array of text.
    */
    text: string[];
    /**
     * Initial color of the text before fill.
     *
     * Gradients supported:
     * Syntax : linear-gradient(/value/)
     *
     * E.g. linear-gradient(90deg, #12C2E9 0%, #c471ed 50%, #f64f59 100%)
     */
    textColor?: string;
    /**
     * Color which is going to fill the character while scroll.
     *
     * Gradients supported:
     * Syntax : linear-gradient(/value/)
     *
     * E.g. linear-gradient(90deg, #12C2E9 0%, #c471ed 50%, #f64f59 100%)
     */
    fillColor?: string;
    /**
     * Speed to fill/show the text (default 100 means 100%)
     */
    fillSpeed?: number;
    /**
     * Delay to fill/show the text
     *
     * Give value between (0-99)
     *
     * Default = 30, means after 30% of viewpoint, transition starts.
     */
    fillDelay?: number;
    /**
     * Direction to fill/show the text
     */
    fillDirection?: 'left-right' | 'top-bottom' | 'slant-top-bottom' | 'slant-bottom-top';
    /**
     * Depends upon the type the transition work.
     *
     * scroll - on mouse scroll transtion happens.
     *
     * timer - automatically transtion starts, when the text is in viewpoint.
     */
    fillType?: 'scroll' | 'timer';
    /**
     * Works when fillType='timer'
     *
     * How much duration to fill/show the text
     *
     * Default 2000 (milliseconds)
     */
    fillDuration?: number;
    /**
     * Having a paragraph?
     * Set freeScroll = true,
     *
     * It takes relative content height and makes transition accordingly
     *
     * Default value = false
     *
     */
    freeScroll?: boolean;
}
interface GenerateClipPathProps {
    ref: React.MutableRefObject<HTMLDivElement | null>;
    fillType: 'scroll' | 'timer';
    fillSpeed: number;
    fillDelay: number;
    fillDirection: 'left-right' | 'top-bottom' | 'slant-top-bottom' | 'slant-bottom-top';
    fillDuration: number;
    textLength: number;
    freeScroll: boolean;
}
interface CounterProps {
    initialValue: number;
    targetValue: number;
    duration: number;
}
type ParentElementType = HTMLElement | Window | null;

/**
 * @description Smooth Color change animation in every characters in a text while scroll
 * @prop text - Array of text.
 * @prop textColor - Initial color of the text before fill
 * @prop fillColor - Color which is going to fill the character while scroll
 * @prop fillSpeed - Speed to fill/show the text (default 100 means 100%)
 * @prop fillDelay - Delay to fill/show the text - Give value between (0-99) (default 30, means after 30% of viewpoint the transition starts)
 * @prop fillDirection - Direction to fill/show the text
 * @prop fillType - 'scroll' | 'timer' 1)scroll - on mouse scroll transtion happens. 2) timer - automatically transtion starts, when the text is in viewpoint.
 * @prop fillDuration - Works when fillType='timer',How much duration to fill/show the text Default 2000 (milliseconds)
*/
declare const TextReveal: ({ text, textColor, fillColor, fillSpeed, fillDelay, fillDirection, fillType, fillDuration, freeScroll }: TextRevealProps) => react_jsx_runtime.JSX.Element;

declare const useScroll: (ref: React.MutableRefObject<HTMLDivElement | null>) => {
    scrollY: number;
    parentElement: ParentElementType;
    parentHeight: number;
    elementTop: number;
};

declare const useCounter: ({ initialValue, targetValue, duration }: CounterProps) => {
    count: number;
    startCounter: () => void;
    stopCounter: () => void;
};

declare const generateClipPath: ({ fillType, ref, fillDelay, fillDirection, fillSpeed, fillDuration, textLength, freeScroll }: GenerateClipPathProps) => {
    generateClipPathFunction: (index: number) => string | undefined;
};

declare const getColor: (color: string) => {
    background: string;
    backgroundClip: string;
    WebkitTextFillColor: string;
    color?: undefined;
} | {
    color: string;
    background?: undefined;
    backgroundClip?: undefined;
    WebkitTextFillColor?: undefined;
};

export { TextReveal as default, generateClipPath, getColor, useCounter, useScroll };
