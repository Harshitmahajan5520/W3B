/**
 * Retrieves a value from local storage.
 * @param {string} name - The name of the item to retrieve.
 * @returns {*} The value stored in local storage, or undefined if the item does not exist or has expired.
 */
declare const getLocal: (name: string) => any;
/**
 * Stores a value in local storage.
 * @param {string} name - The name of the item to store.
 * @param {*} value - The value to store.
 * @param {object} options - Optional configuration object.
 * @param {string | number | Date} options.expiration - The expiration date/time for the item.
 * @param {number} options.timeToLive - The time to live in milliseconds.
 * @returns {*} The stored value.
 */
declare const setLocal: (name: string, value: any, { expiration, timeToLive }?: {
    expiration?: string | number | Date | undefined;
    timeToLive?: number | undefined;
}) => any;
/**
 * Deletes an item from local storage.
 * @param {string} name - The name of the item to delete.
 */
declare const deleteLocal: (name: string) => void;
/**
 * Updates a value in local storage with the provided changes.
 * @param {string} name - The name of the item to update.
 * @param {object} changes - An object containing the changes to apply to the stored value.
 * @returns {*} The updated value.
 */
declare const changeLocal: (name: string, changes: {
    [key: string]: any;
}) => any;
/**
 * Clears all items from local storage.
 */
declare const clearLocal: () => void;
/**
 * Retrieves a value from session storage.
 * @param {string} name - The name of the item to retrieve.
 * @returns {*} The value stored in session storage, or undefined if the item does not exist or has expired.
 */
declare const getSession: (name: string) => any;
/**
 * Stores a value in session storage.
 * @param {string} name - The name of the item to store.
 * @param {*} value - The value to store.
 * @param {object} options - Optional configuration object.
 * @param {string | number | Date} options.expiration - The expiration date/time for the item.
 * @param {number} options.timeToLive - The time to live in milliseconds.
 * @returns {*} The stored value.
 */
declare const setSession: (name: string, value: any, { expiration, timeToLive }?: {
    expiration?: string | number | Date | undefined;
    timeToLive?: number | undefined;
}) => any;
/**
 * Updates a value in session storage with the provided changes.
 * @param {string} name - The name of the item to update.
 * @param {object} changes - An object containing the changes to apply to the stored value.
 * @returns {*} The updated value.
 */
declare const changeSession: (name: string, changes: {
    [key: string]: any;
}) => any;
/**
 * Deletes an item from session storage.
 * @param {string} name - The name of the item to delete.
 */
declare const deleteSession: (name: string) => void;
/**
 * Clears all items from session storage.
 */
declare const clearSession: () => void;
export { getLocal, setLocal, deleteLocal, changeLocal, clearLocal, getSession, setSession, changeSession, deleteSession, clearSession };
